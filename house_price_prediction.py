# -*- coding: utf-8 -*-
"""House price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xH5vaWsVWE_mUzdZbqBfKABckSWwSVae
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import fetch_california_housing
california_housing = fetch_california_housing()
df= pd.DataFrame(data=california_housing.data, columns=california_housing.feature_names)
df['target'] = california_housing.target
df

df.shape

df.info

print("Null Values in the Dataset:")
print(df.isnull().sum())

df.columns=[1,2,3,4,5,6,7,8,9]

df[9].value_counts()

x=df.iloc[:,0:8]
y=df.iloc[:,8]
y

plt.figure(figsize=(10, 8))
x.hist(bins=20, figsize=(10, 8), color='skyblue', edgecolor='black')
plt.suptitle("Histograms of Features", y=1.02)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 8))
data_with_target = pd.concat([x, y], axis=1)
correlation_matrix = data_with_target.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=.5)
plt.title("Correlation Heatmap")
plt.show()

fig, ax = plt.subplots(figsize=(10, 8))
scatter_matrix = pd.plotting.scatter_matrix(df.iloc[:, :8], c=df[9], marker='o', cmap='viridis', ax=ax)
plt.suptitle("Scatter Plot Matrix of Features Colored by Target Variable", y=1.02)
plt.show()

fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df[1], df[3], df[9], c=df[9], cmap='viridis', marker='o')
ax.set_xlabel('MedInc')
ax.set_ylabel('AveRooms')
ax.set_zlabel('Target')
plt.title("3D Scatter Plot of MedInc, AveRooms, and Target")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
knn_regressor = KNeighborsRegressor(n_neighbors=3)

knn_regressor.fit(x_train, y_train)
y_pred = knn_regressor.predict(x_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.4f}")
print(f"R-squared: {r2:.4f}")

plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Actual vs. Predicted Values (k-NN Regression)")
plt.show()